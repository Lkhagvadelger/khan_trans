generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  code                String?   @unique
  email               String?   @unique
  emailVerified       DateTime?
  passwordDigest      String?
  phoneNumber         String    @unique
  phoneNumberVerified DateTime?
  role                UserRole  @default(ADMIN)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  pin                 String?
  pinCreatedAt        DateTime?
  pinType             String?
  pinVerifiedAt       DateTime?
  profile             Profile?
  tags                String[]  @default([])

  // Relationship with ActivityLog
  activityLogs        ActivityLog[]
}

model Profile {
  id                 String    @id @default(cuid())
  userId             String    @unique
  firstName          String    @default("")
  lastName           String    @default("")
  sex                String?
  dob                String?
  height             Int?
  weight             Int?
  picture            String?
  priceMin           Int?
  priceMax           Int?
  notifyEmail        Boolean   @default(true)
  notifyPush         Boolean   @default(true)
  notifyBadge        Boolean   @default(true)
  historyId          String?   @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  specialistDesc     String?
  patientCode        String?   @unique
  allowPatientAssign DateTime?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Load {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  LoadID       String    @unique
  PickUpDate   DateTime
  DeliveryDate DateTime

  loadAddresses LoadAddress[] 
  vehicles      Vehicle[]    
  notes         Note[]        
  payments      Payment[]    
  driver        Driver?       @relation(fields: [driverId], references: [id])
  driverId      String?
  broker        BrokerInfo?   @relation(fields: [brokerId], references: [id])
  brokerId      String?

  // Relationship with ActivityLog
  activityLogs  ActivityLog[]
}

model Vehicle {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  Vehicle          String

  VehicleWeight    Int?
  VehicleType      String?
  VehicleYear      Int?
  VehicleMake      String?
  VehicleModel     String?
  VehicleColor     String?
  VehicleLotNumber String?

  // Relationships
  loadId           String?
  load             Load? @relation(fields: [loadId], references: [id])
}


model LoadAddress {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Location    String
  Contact     String
  ContactPhone String

  // Relationships
  loadId      String?
  load        Load? @relation(fields: [loadId], references: [id])
}

model Note {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Note        String

  // Relationships
  loadId      String?
  load        Load? @relation(fields: [loadId], references: [id])
}

model Payment {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Payment        String
  PaymentDate    DateTime
  PaymentAmount  Int
  PaymentMethod  String
  PaymentStatus  String

  // Relationships
  loadId         String?
  load           Load? @relation(fields: [loadId], references: [id])
}

model Driver {
  id                   String   @id @default(cuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  Driver               String
  DriverPhone          String
  DriverEmail          String @unique
  DriverLicense        String @unique
  DriverLicenseExpiry  DateTime
  DriverLicenseState   String
  DriverLicenseNumber  String @unique

  // Relationships
  loads                Load[]
}

model BrokerInfo {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  BrokerName  String
  BrokerEmail String @unique
  BrokerContact Int
  MC_Number   Int @unique

  // Relationships
  loads       Load[]
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model SmsRequestAttempt {
  id          String   @id @default(cuid())
  phoneNumber String
  ipAddress   String
  createdAt   DateTime @default(now())
}

model FileUpload {
  id                   String    @id @default(cuid())
  fileGroup            String?
  fileLink             String
  fileSource           String
  removedAt            DateTime?
  createdBy            String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  fileCategory         String?
  fileSourceDate       String?
  patientNoteId        String?
  fileMIMEType         String
  specialistQuestionId String?
}

enum UserRole {
  DRIVER
  DISPATCHER
  ADMIN
}

model IP2Location {
  id          String   @id @default(cuid())
  ipFrom      BigInt
  ipTo        BigInt
  countryCode String
  country     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FirebaseToken {
  id        String   @id @default(cuid())
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PatientRegion {
  NORTH
  SOUTH
  EAST
  WEST
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String   // The user who performed the action
  action      String   // Created, Updated, Deleted
  timestamp   DateTime @default(now())
  loadId      String?  // Optional, if related to a load
  load        Load?    @relation(fields: [loadId], references: [id], onDelete: Cascade)
  details     String?  // JSON or text field to store changes
  ipAddress   String?  // Optionally log the IP of the user
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
